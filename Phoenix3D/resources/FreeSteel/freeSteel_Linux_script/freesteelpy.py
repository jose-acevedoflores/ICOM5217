# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
The freesteel slicing library.
Call us on 000-000-0000.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_freesteelpy', [dirname(__file__)])
        except ImportError:
            import _freesteelpy
            return _freesteelpy
        if fp is not None:
            try:
                _mod = imp.load_module('_freesteelpy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _freesteelpy = swig_import_helper()
    del swig_import_helper
else:
    import _freesteelpy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class FileLocation(_object):
    """Proxy of C++ FileLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FileLocation
        __init__(self, char _filename, unsigned int _line) -> FileLocation
        """
        this = _freesteelpy.new_FileLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def isValid(self):
        """isValid(self) -> bool"""
        return _freesteelpy.FileLocation_isValid(self)

    __swig_destroy__ = _freesteelpy.delete_FileLocation
    __del__ = lambda self : None;
FileLocation_swigregister = _freesteelpy.FileLocation_swigregister
FileLocation_swigregister(FileLocation)

class DynamicObject(_object):
    """Proxy of C++ DynamicObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DynamicObject"""
        this = _freesteelpy.new_DynamicObject()
        try: self.this.append(this)
        except: self.this = this
    def getFileLocation(self):
        """getFileLocation(self) -> FileLocation"""
        return _freesteelpy.DynamicObject_getFileLocation(self)

    def setFileLocation(self, *args, **kwargs):
        """setFileLocation(self, FileLocation fileLocation)"""
        return _freesteelpy.DynamicObject_setFileLocation(self, *args, **kwargs)

    def getObjectId(self):
        """getObjectId(self) -> unsigned int"""
        return _freesteelpy.DynamicObject_getObjectId(self)

    __swig_destroy__ = _freesteelpy.delete_DynamicObject
    __del__ = lambda self : None;
DynamicObject_swigregister = _freesteelpy.DynamicObject_swigregister
DynamicObject_swigregister(DynamicObject)

class FsSurfInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsSurf)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurfInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurfInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsSurfInstanceCounter
        __init__(self, FsSurfInstanceCounter arg0) -> FsSurfInstanceCounter
        """
        this = _freesteelpy.new_FsSurfInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsSurfInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsSurfInstanceCounter
    __del__ = lambda self : None;
FsSurfInstanceCounter_swigregister = _freesteelpy.FsSurfInstanceCounter_swigregister
FsSurfInstanceCounter_swigregister(FsSurfInstanceCounter)

class FsFibreInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsFibre)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsFibreInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsFibreInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsFibreInstanceCounter
        __init__(self, FsFibreInstanceCounter arg0) -> FsFibreInstanceCounter
        """
        this = _freesteelpy.new_FsFibreInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsFibreInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsFibreInstanceCounter
    __del__ = lambda self : None;
FsFibreInstanceCounter_swigregister = _freesteelpy.FsFibreInstanceCounter_swigregister
FsFibreInstanceCounter_swigregister(FsFibreInstanceCounter)

class FsSurfaceHitRegistryInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsSurfaceHitRegistry)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurfaceHitRegistryInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurfaceHitRegistryInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsSurfaceHitRegistryInstanceCounter
        __init__(self, FsSurfaceHitRegistryInstanceCounter arg0) -> FsSurfaceHitRegistryInstanceCounter
        """
        this = _freesteelpy.new_FsSurfaceHitRegistryInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsSurfaceHitRegistryInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsSurfaceHitRegistryInstanceCounter
    __del__ = lambda self : None;
FsSurfaceHitRegistryInstanceCounter_swigregister = _freesteelpy.FsSurfaceHitRegistryInstanceCounter_swigregister
FsSurfaceHitRegistryInstanceCounter_swigregister(FsSurfaceHitRegistryInstanceCounter)

class FsSurfaceHitRegInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsSurfaceHitReg)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurfaceHitRegInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurfaceHitRegInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsSurfaceHitRegInstanceCounter
        __init__(self, FsSurfaceHitRegInstanceCounter arg0) -> FsSurfaceHitRegInstanceCounter
        """
        this = _freesteelpy.new_FsSurfaceHitRegInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsSurfaceHitRegInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsSurfaceHitRegInstanceCounter
    __del__ = lambda self : None;
FsSurfaceHitRegInstanceCounter_swigregister = _freesteelpy.FsSurfaceHitRegInstanceCounter_swigregister
FsSurfaceHitRegInstanceCounter_swigregister(FsSurfaceHitRegInstanceCounter)

class FsWeaveInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsWeave)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsWeaveInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsWeaveInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsWeaveInstanceCounter
        __init__(self, FsWeaveInstanceCounter arg0) -> FsWeaveInstanceCounter
        """
        this = _freesteelpy.new_FsWeaveInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsWeaveInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsWeaveInstanceCounter
    __del__ = lambda self : None;
FsWeaveInstanceCounter_swigregister = _freesteelpy.FsWeaveInstanceCounter_swigregister
FsWeaveInstanceCounter_swigregister(FsWeaveInstanceCounter)

class FsBoundariesInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsBoundaries)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsBoundariesInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsBoundariesInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsBoundariesInstanceCounter
        __init__(self, FsBoundariesInstanceCounter arg0) -> FsBoundariesInstanceCounter
        """
        this = _freesteelpy.new_FsBoundariesInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsBoundariesInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsBoundariesInstanceCounter
    __del__ = lambda self : None;
FsBoundariesInstanceCounter_swigregister = _freesteelpy.FsBoundariesInstanceCounter_swigregister
FsBoundariesInstanceCounter_swigregister(FsBoundariesInstanceCounter)

class FsBoxedPathInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsBoxedPath)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsBoxedPathInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsBoxedPathInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsBoxedPathInstanceCounter
        __init__(self, FsBoxedPathInstanceCounter arg0) -> FsBoxedPathInstanceCounter
        """
        this = _freesteelpy.new_FsBoxedPathInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsBoxedPathInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsBoxedPathInstanceCounter
    __del__ = lambda self : None;
FsBoxedPathInstanceCounter_swigregister = _freesteelpy.FsBoxedPathInstanceCounter_swigregister
FsBoxedPathInstanceCounter_swigregister(FsBoxedPathInstanceCounter)

class FsHorizontalInflexionAvoidanceInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsHorizontalInflexionAvoidance)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsHorizontalInflexionAvoidanceInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsHorizontalInflexionAvoidanceInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsHorizontalInflexionAvoidanceInstanceCounter
        __init__(self, FsHorizontalInflexionAvoidanceInstanceCounter arg0) -> FsHorizontalInflexionAvoidanceInstanceCounter
        """
        this = _freesteelpy.new_FsHorizontalInflexionAvoidanceInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsHorizontalInflexionAvoidanceInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsHorizontalInflexionAvoidanceInstanceCounter
    __del__ = lambda self : None;
FsHorizontalInflexionAvoidanceInstanceCounter_swigregister = _freesteelpy.FsHorizontalInflexionAvoidanceInstanceCounter_swigregister
FsHorizontalInflexionAvoidanceInstanceCounter_swigregister(FsHorizontalInflexionAvoidanceInstanceCounter)

class FsHorizontalToolSurfaceInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsHorizontalToolSurface)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsHorizontalToolSurfaceInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsHorizontalToolSurfaceInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsHorizontalToolSurfaceInstanceCounter
        __init__(self, FsHorizontalToolSurfaceInstanceCounter arg0) -> FsHorizontalToolSurfaceInstanceCounter
        """
        this = _freesteelpy.new_FsHorizontalToolSurfaceInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsHorizontalToolSurfaceInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsHorizontalToolSurfaceInstanceCounter
    __del__ = lambda self : None;
FsHorizontalToolSurfaceInstanceCounter_swigregister = _freesteelpy.FsHorizontalToolSurfaceInstanceCounter_swigregister
FsHorizontalToolSurfaceInstanceCounter_swigregister(FsHorizontalToolSurfaceInstanceCounter)

class FsImplicitAreaInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsImplicitArea)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsImplicitAreaInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsImplicitAreaInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsImplicitAreaInstanceCounter
        __init__(self, FsImplicitAreaInstanceCounter arg0) -> FsImplicitAreaInstanceCounter
        """
        this = _freesteelpy.new_FsImplicitAreaInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsImplicitAreaInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsImplicitAreaInstanceCounter
    __del__ = lambda self : None;
FsImplicitAreaInstanceCounter_swigregister = _freesteelpy.FsImplicitAreaInstanceCounter_swigregister
FsImplicitAreaInstanceCounter_swigregister(FsImplicitAreaInstanceCounter)

class FsPath2XInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsPath2X)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsPath2XInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsPath2XInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsPath2XInstanceCounter
        __init__(self, FsPath2XInstanceCounter arg0) -> FsPath2XInstanceCounter
        """
        this = _freesteelpy.new_FsPath2XInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsPath2XInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsPath2XInstanceCounter
    __del__ = lambda self : None;
FsPath2XInstanceCounter_swigregister = _freesteelpy.FsPath2XInstanceCounter_swigregister
FsPath2XInstanceCounter_swigregister(FsPath2XInstanceCounter)

class ThinnerInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(Thinner)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThinnerInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThinnerInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ThinnerInstanceCounter
        __init__(self, ThinnerInstanceCounter arg0) -> ThinnerInstanceCounter
        """
        this = _freesteelpy.new_ThinnerInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.ThinnerInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_ThinnerInstanceCounter
    __del__ = lambda self : None;
ThinnerInstanceCounter_swigregister = _freesteelpy.ThinnerInstanceCounter_swigregister
ThinnerInstanceCounter_swigregister(ThinnerInstanceCounter)

class FsFreeFibreInstanceCounter(DynamicObject):
    """Proxy of C++ InstanceCounter<(FsFreeFibre)> class"""
    __swig_setmethods__ = {}
    for _s in [DynamicObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsFreeFibreInstanceCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsFreeFibreInstanceCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FsFreeFibreInstanceCounter
        __init__(self, FsFreeFibreInstanceCounter arg0) -> FsFreeFibreInstanceCounter
        """
        this = _freesteelpy.new_FsFreeFibreInstanceCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInstanceId(self):
        """getInstanceId(self) -> unsigned int"""
        return _freesteelpy.FsFreeFibreInstanceCounter_getInstanceId(self)

    __swig_destroy__ = _freesteelpy.delete_FsFreeFibreInstanceCounter
    __del__ = lambda self : None;
FsFreeFibreInstanceCounter_swigregister = _freesteelpy.FsFreeFibreInstanceCounter_swigregister
FsFreeFibreInstanceCounter_swigregister(FsFreeFibreInstanceCounter)

class FsKernel(_object):
    """Proxy of C++ FsKernel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsKernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FsKernel, name)
    __repr__ = _swig_repr
    def IsDebugging():
        """IsDebugging() -> bool"""
        return _freesteelpy.FsKernel_IsDebugging()

    if _newclass:IsDebugging = staticmethod(IsDebugging)
    __swig_getmethods__["IsDebugging"] = lambda x: IsDebugging
    def SetDebugging(*args, **kwargs):
        """SetDebugging(bool _debugging)"""
        return _freesteelpy.FsKernel_SetDebugging(*args, **kwargs)

    if _newclass:SetDebugging = staticmethod(SetDebugging)
    __swig_getmethods__["SetDebugging"] = lambda x: SetDebugging
    def __init__(self): 
        """__init__(self) -> FsKernel"""
        this = _freesteelpy.new_FsKernel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _freesteelpy.delete_FsKernel
    __del__ = lambda self : None;
FsKernel_swigregister = _freesteelpy.FsKernel_swigregister
FsKernel_swigregister(FsKernel)

def FsKernel_IsDebugging():
  """FsKernel_IsDebugging() -> bool"""
  return _freesteelpy.FsKernel_IsDebugging()

def FsKernel_SetDebugging(*args, **kwargs):
  """FsKernel_SetDebugging(bool _debugging)"""
  return _freesteelpy.FsKernel_SetDebugging(*args, **kwargs)

class ProgressListener(_object):
    """Proxy of C++ ProgressListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def onProgress(self, *args, **kwargs):
        """onProgress(self, double progress) -> bool"""
        return _freesteelpy.ProgressListener_onProgress(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_ProgressListener
    __del__ = lambda self : None;
ProgressListener_swigregister = _freesteelpy.ProgressListener_swigregister
ProgressListener_swigregister(ProgressListener)

class MappedProgressListener(ProgressListener):
    """Proxy of C++ MappedProgressListener class"""
    __swig_setmethods__ = {}
    for _s in [ProgressListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedProgressListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ProgressListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MappedProgressListener, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, ProgressListener _listener, double _offset = 0, double _factor = 1) -> MappedProgressListener"""
        this = _freesteelpy.new_MappedProgressListener(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def onProgress(self, *args, **kwargs):
        """onProgress(self, double progress) -> bool"""
        return _freesteelpy.MappedProgressListener_onProgress(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_MappedProgressListener
    __del__ = lambda self : None;
MappedProgressListener_swigregister = _freesteelpy.MappedProgressListener_swigregister
MappedProgressListener_swigregister(MappedProgressListener)

class ContactConditionContext(_object):
    """Proxy of C++ ContactConditionContext class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactConditionContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactConditionContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tipPoint"] = _freesteelpy.ContactConditionContext_tipPoint_set
    __swig_getmethods__["tipPoint"] = _freesteelpy.ContactConditionContext_tipPoint_get
    if _newclass:tipPoint = _swig_property(_freesteelpy.ContactConditionContext_tipPoint_get, _freesteelpy.ContactConditionContext_tipPoint_set)
    __swig_setmethods__["normal"] = _freesteelpy.ContactConditionContext_normal_set
    __swig_getmethods__["normal"] = _freesteelpy.ContactConditionContext_normal_get
    if _newclass:normal = _swig_property(_freesteelpy.ContactConditionContext_normal_get, _freesteelpy.ContactConditionContext_normal_set)
    __swig_setmethods__["contactPoint"] = _freesteelpy.ContactConditionContext_contactPoint_set
    __swig_getmethods__["contactPoint"] = _freesteelpy.ContactConditionContext_contactPoint_get
    if _newclass:contactPoint = _swig_property(_freesteelpy.ContactConditionContext_contactPoint_get, _freesteelpy.ContactConditionContext_contactPoint_set)
    __swig_setmethods__["contact"] = _freesteelpy.ContactConditionContext_contact_set
    __swig_getmethods__["contact"] = _freesteelpy.ContactConditionContext_contact_get
    if _newclass:contact = _swig_property(_freesteelpy.ContactConditionContext_contact_get, _freesteelpy.ContactConditionContext_contact_set)
    def __init__(self): 
        """__init__(self) -> ContactConditionContext"""
        this = _freesteelpy.new_ContactConditionContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _freesteelpy.delete_ContactConditionContext
    __del__ = lambda self : None;
ContactConditionContext_swigregister = _freesteelpy.ContactConditionContext_swigregister
ContactConditionContext_swigregister(ContactConditionContext)

class ContactConditionFilter(_object):
    """Proxy of C++ ContactConditionFilter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactConditionFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactConditionFilter, name)
    __repr__ = _swig_repr
    def getInclude():
        """getInclude() -> double"""
        return _freesteelpy.ContactConditionFilter_getInclude()

    if _newclass:getInclude = staticmethod(getInclude)
    __swig_getmethods__["getInclude"] = lambda x: getInclude
    def getExclude():
        """getExclude() -> double"""
        return _freesteelpy.ContactConditionFilter_getExclude()

    if _newclass:getExclude = staticmethod(getExclude)
    __swig_getmethods__["getExclude"] = lambda x: getExclude
    def filter(self, *args):
        """
        filter(self, ContactConditionContext c) -> double
        filter(self, P3 p, P3 n, ContAng cutterCondition) -> double
        """
        return _freesteelpy.ContactConditionFilter_filter(self, *args)

    def lowerAtWall(self, *args, **kwargs):
        """lowerAtWall(self, P2 p, double z, P3 n, ContAng cutterCondition, double zlo) -> double"""
        return _freesteelpy.ContactConditionFilter_lowerAtWall(self, *args, **kwargs)

    def liftAtWall(self, *args, **kwargs):
        """liftAtWall(self, P2 p, double z, P3 n, ContAng cutterCondition, double zhi) -> double"""
        return _freesteelpy.ContactConditionFilter_liftAtWall(self, *args, **kwargs)

    def __init__(self): 
        """__init__(self) -> ContactConditionFilter"""
        this = _freesteelpy.new_ContactConditionFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _freesteelpy.delete_ContactConditionFilter
    __del__ = lambda self : None;
ContactConditionFilter_swigregister = _freesteelpy.ContactConditionFilter_swigregister
ContactConditionFilter_swigregister(ContactConditionFilter)

def ContactConditionFilter_getInclude():
  """ContactConditionFilter_getInclude() -> double"""
  return _freesteelpy.ContactConditionFilter_getInclude()

def ContactConditionFilter_getExclude():
  """ContactConditionFilter_getExclude() -> double"""
  return _freesteelpy.ContactConditionFilter_getExclude()

class FsSurf(FsSurfInstanceCounter):
    """Proxy of C++ FsSurf class"""
    __swig_setmethods__ = {}
    for _s in [FsSurfInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurf, name, value)
    __swig_getmethods__ = {}
    for _s in [FsSurfInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurf, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["bOrientTrianglesByZ"] = _freesteelpy.FsSurf_bOrientTrianglesByZ_set
    __swig_getmethods__["bOrientTrianglesByZ"] = _freesteelpy.FsSurf_bOrientTrianglesByZ_get
    if _newclass:bOrientTrianglesByZ = _swig_property(_freesteelpy.FsSurf_bOrientTrianglesByZ_get, _freesteelpy.FsSurf_bOrientTrianglesByZ_set)
    def SetMaximumMemoryUsage(self, *args, **kwargs):
        """SetMaximumMemoryUsage(self, size_t maximumMemoryUsage)"""
        return _freesteelpy.FsSurf_SetMaximumMemoryUsage(self, *args, **kwargs)

    def PushTriangle(self, *args, **kwargs):
        """
        PushTriangle(self, double x0, double y0, double z0, double x1, double y1, 
            double z1, double x2, double y2, double z2)
        """
        return _freesteelpy.FsSurf_PushTriangle(self, *args, **kwargs)

    def PushIsolatedEdge(self, *args, **kwargs):
        """
        PushIsolatedEdge(self, double x0, double y0, double z0, double x1, double y1, 
            double z1)
        """
        return _freesteelpy.FsSurf_PushIsolatedEdge(self, *args, **kwargs)

    def PushIsolatedPoint(self, *args, **kwargs):
        """PushIsolatedPoint(self, double x0, double y0, double z0)"""
        return _freesteelpy.FsSurf_PushIsolatedPoint(self, *args, **kwargs)

    def Build(self, *args, **kwargs):
        """Build(self, double boxwidth, ProgressListener progressListener = None) -> bool"""
        return _freesteelpy.FsSurf_Build(self, *args, **kwargs)

    def ReleaseBoxing(self):
        """ReleaseBoxing(self)"""
        return _freesteelpy.FsSurf_ReleaseBoxing(self)

    def IsBoxed(self):
        """IsBoxed(self) -> bool"""
        return _freesteelpy.FsSurf_IsBoxed(self)

    def GetNTriangles(self):
        """GetNTriangles(self) -> int"""
        return _freesteelpy.FsSurf_GetNTriangles(self)

    def GetNEdges(self, *args, **kwargs):
        """GetNEdges(self, bool bOnesided) -> int"""
        return _freesteelpy.FsSurf_GetNEdges(self, *args, **kwargs)

    def GetNFreeEdges(self, *args, **kwargs):
        """GetNFreeEdges(self, bool bisolated) -> int"""
        return _freesteelpy.FsSurf_GetNFreeEdges(self, *args, **kwargs)

    def GetNPoints(self, *args, **kwargs):
        """GetNPoints(self, bool bisolated) -> int"""
        return _freesteelpy.FsSurf_GetNPoints(self, *args, **kwargs)

    def GetXlo(self):
        """GetXlo(self) -> double"""
        return _freesteelpy.FsSurf_GetXlo(self)

    def GetXhi(self):
        """GetXhi(self) -> double"""
        return _freesteelpy.FsSurf_GetXhi(self)

    def GetYlo(self):
        """GetYlo(self) -> double"""
        return _freesteelpy.FsSurf_GetYlo(self)

    def GetYhi(self):
        """GetYhi(self) -> double"""
        return _freesteelpy.FsSurf_GetYhi(self)

    def GetZlo(self):
        """GetZlo(self) -> double"""
        return _freesteelpy.FsSurf_GetZlo(self)

    def GetZhi(self):
        """GetZhi(self) -> double"""
        return _freesteelpy.FsSurf_GetZhi(self)

    def GetMemorySize(self):
        """GetMemorySize(self) -> size_t"""
        return _freesteelpy.FsSurf_GetMemorySize(self)

    def GetCapacity(self):
        """GetCapacity(self) -> size_t"""
        return _freesteelpy.FsSurf_GetCapacity(self)

    def BestAvoidInflexion(self, *args, **kwargs):
        """BestAvoidInflexion(self, double zlo, double zhi, double zoffset, double rim0) -> double"""
        return _freesteelpy.FsSurf_BestAvoidInflexion(self, *args, **kwargs)

    def FigureFlatTriangles(self, *args, **kwargs):
        """FigureFlatTriangles(self, double sinslope, double ridgerad, double minsteparea) -> int"""
        return _freesteelpy.FsSurf_FigureFlatTriangles(self, *args, **kwargs)

    def AddFlatPlaceZ(self, *args, **kwargs):
        """AddFlatPlaceZ(self, double z)"""
        return _freesteelpy.FsSurf_AddFlatPlaceZ(self, *args, **kwargs)

    def GetFlatPlaceZ(self, *args, **kwargs):
        """GetFlatPlaceZ(self, int i) -> double"""
        return _freesteelpy.FsSurf_GetFlatPlaceZ(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsSurf
    __del__ = lambda self : None;
    def New():
        """New() -> FsSurf"""
        return _freesteelpy.FsSurf_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsSurf_swigregister = _freesteelpy.FsSurf_swigregister
FsSurf_swigregister(FsSurf)

def FsSurf_New():
  """FsSurf_New() -> FsSurf"""
  return _freesteelpy.FsSurf_New()

class FsFibre(FsFibreInstanceCounter):
    """Proxy of C++ FsFibre class"""
    __swig_setmethods__ = {}
    for _s in [FsFibreInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsFibre, name, value)
    __swig_getmethods__ = {}
    for _s in [FsFibreInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsFibre, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _freesteelpy.delete_FsFibre
    __del__ = lambda self : None;
    def SetFPath(self, *args, **kwargs):
        """SetFPath(self, FsPath2X lpfpathcase, double lrtrimmingepsilon)"""
        return _freesteelpy.FsFibre_SetFPath(self, *args, **kwargs)

    def SetShapeSurfZdisp(self, *args, **kwargs):
        """
        SetShapeSurfZdisp(self, double perpu, double perpv, double wp, double w0, double w1, 
            double zdisp)
        """
        return _freesteelpy.FsFibre_SetShapeSurfZdisp(self, *args, **kwargs)

    def SetShapeFiveAxTraj(self, *args, **kwargs):
        """
        SetShapeFiveAxTraj(self, double p0x, double p0y, double p0z, double p1x, double p1y, 
            double p1z, double sx, double sy, double sz)
        """
        return _freesteelpy.FsFibre_SetShapeFiveAxTraj(self, *args, **kwargs)

    def IsTrimmed(self):
        """IsTrimmed(self) -> bool"""
        return _freesteelpy.FsFibre_IsTrimmed(self)

    def GetNBoundaries(self):
        """GetNBoundaries(self) -> int"""
        return _freesteelpy.FsFibre_GetNBoundaries(self)

    def GetBoundary(self, *args, **kwargs):
        """GetBoundary(self, int ib) -> double"""
        return _freesteelpy.FsFibre_GetBoundary(self, *args, **kwargs)

    def GetFBoundaryI(self, *args, **kwargs):
        """GetFBoundaryI(self, int ib) -> int"""
        return _freesteelpy.FsFibre_GetFBoundaryI(self, *args, **kwargs)

    def GetFBoundaryC(self, *args, **kwargs):
        """GetFBoundaryC(self, int ib, int icoord) -> double"""
        return _freesteelpy.FsFibre_GetFBoundaryC(self, *args, **kwargs)

    def New():
        """New() -> FsFibre"""
        return _freesteelpy.FsFibre_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsFibre_swigregister = _freesteelpy.FsFibre_swigregister
FsFibre_swigregister(FsFibre)

def FsFibre_New():
  """FsFibre_New() -> FsFibre"""
  return _freesteelpy.FsFibre_New()

class FsSurfaceHitRegistry(FsSurfaceHitRegistryInstanceCounter):
    """Proxy of C++ FsSurfaceHitRegistry class"""
    __swig_setmethods__ = {}
    for _s in [FsSurfaceHitRegistryInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurfaceHitRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [FsSurfaceHitRegistryInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurfaceHitRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> FsSurfaceHitRegistry"""
        this = _freesteelpy.new_FsSurfaceHitRegistry()
        try: self.this.append(this)
        except: self.this = this
    def GetSurfaceHitRegistryImpl(self):
        """GetSurfaceHitRegistryImpl(self) -> SurfHitReg"""
        return _freesteelpy.FsSurfaceHitRegistry_GetSurfaceHitRegistryImpl(self)

    __swig_destroy__ = _freesteelpy.delete_FsSurfaceHitRegistry
    __del__ = lambda self : None;
FsSurfaceHitRegistry_swigregister = _freesteelpy.FsSurfaceHitRegistry_swigregister
FsSurfaceHitRegistry_swigregister(FsSurfaceHitRegistry)


def GetSurfaceHitRegistryImpl(*args, **kwargs):
  """GetSurfaceHitRegistryImpl(FsSurfaceHitRegistry registry) -> SurfHitReg"""
  return _freesteelpy.GetSurfaceHitRegistryImpl(*args, **kwargs)
class FsSurfaceHitReg(FsSurfaceHitRegInstanceCounter):
    """Proxy of C++ FsSurfaceHitReg class"""
    __swig_setmethods__ = {}
    for _s in [FsSurfaceHitRegInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsSurfaceHitReg, name, value)
    __swig_getmethods__ = {}
    for _s in [FsSurfaceHitRegInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsSurfaceHitReg, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddSurf(self, *args, **kwargs):
        """AddSurf(self, FsSurf lfssurf)"""
        return _freesteelpy.FsSurfaceHitReg_AddSurf(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsSurfaceHitReg
    __del__ = lambda self : None;
    def New():
        """New() -> FsSurfaceHitReg"""
        return _freesteelpy.FsSurfaceHitReg_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsSurfaceHitReg_swigregister = _freesteelpy.FsSurfaceHitReg_swigregister
FsSurfaceHitReg_swigregister(FsSurfaceHitReg)

def FsSurfaceHitReg_New():
  """FsSurfaceHitReg_New() -> FsSurfaceHitReg"""
  return _freesteelpy.FsSurfaceHitReg_New()


def DClosestApproach(*args, **kwargs):
  """
    DClosestApproach(double px, double py, double pz, FsSurf fssurfI, FsSurfaceHitReg fssurfhitregI, 
        double radlo, double radhi) -> double
    """
  return _freesteelpy.DClosestApproach(*args, **kwargs)
class FsWeave(FsWeaveInstanceCounter):
    """Proxy of C++ FsWeave class"""
    __swig_setmethods__ = {}
    for _s in [FsWeaveInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsWeave, name, value)
    __swig_getmethods__ = {}
    for _s in [FsWeaveInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsWeave, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetMemorySize(self):
        """GetMemorySize(self) -> size_t"""
        return _freesteelpy.FsWeave_GetMemorySize(self)

    def GetCapacity(self):
        """GetCapacity(self) -> size_t"""
        return _freesteelpy.FsWeave_GetCapacity(self)

    def SetWeaveDrawMode(self, *args, **kwargs):
        """SetWeaveDrawMode(self, int liViewFibres)"""
        return _freesteelpy.FsWeave_SetWeaveDrawMode(self, *args, **kwargs)

    def SetShape(self, *args, **kwargs):
        """SetShape(self, double ulo, double uhi, double vlo, double vhi, double res)"""
        return _freesteelpy.FsWeave_SetShape(self, *args, **kwargs)

    def StructureContours(self):
        """StructureContours(self)"""
        return _freesteelpy.FsWeave_StructureContours(self)

    def IsStructured(self):
        """IsStructured(self) -> bool"""
        return _freesteelpy.FsWeave_IsStructured(self)

    def FindContourFragments(self, *args, **kwargs):
        """
        FindContourFragments(self, int icont, double maximumCombinementDistance, double minimumFragmentLength, 
            double extensionDistance) -> int
        """
        return _freesteelpy.FsWeave_FindContourFragments(self, *args, **kwargs)

    def GetNFibres(self, *args, **kwargs):
        """GetNFibres(self, bool bUFibres) -> int"""
        return _freesteelpy.FsWeave_GetNFibres(self, *args, **kwargs)

    def GetNBoundaries(self, *args, **kwargs):
        """GetNBoundaries(self, int ifib, bool bUFibres) -> int"""
        return _freesteelpy.FsWeave_GetNBoundaries(self, *args, **kwargs)

    def GetBoundary(self, *args, **kwargs):
        """GetBoundary(self, int ifib, bool bUFibres, int ib) -> double"""
        return _freesteelpy.FsWeave_GetBoundary(self, *args, **kwargs)

    def GetDist(self, *args, **kwargs):
        """GetDist(self, int ifib, bool bUFibres) -> double"""
        return _freesteelpy.FsWeave_GetDist(self, *args, **kwargs)

    def GetNContours(self):
        """GetNContours(self) -> int"""
        return _freesteelpy.FsWeave_GetNContours(self)

    def GetZlo(self):
        """GetZlo(self) -> double"""
        return _freesteelpy.FsWeave_GetZlo(self)

    def GetZhi(self):
        """GetZhi(self) -> double"""
        return _freesteelpy.FsWeave_GetZhi(self)

    def IsCavity(self, *args, **kwargs):
        """IsCavity(self, int icon) -> bool"""
        return _freesteelpy.FsWeave_IsCavity(self, *args, **kwargs)

    def Is2PointContour(self, *args, **kwargs):
        """Is2PointContour(self, int icon) -> bool"""
        return _freesteelpy.FsWeave_Is2PointContour(self, *args, **kwargs)

    def GetContourOutside(self, *args, **kwargs):
        """GetContourOutside(self, int icon) -> int"""
        return _freesteelpy.FsWeave_GetContourOutside(self, *args, **kwargs)

    def GetContourScallopOutForced(self, *args, **kwargs):
        """GetContourScallopOutForced(self, int icon) -> int"""
        return _freesteelpy.FsWeave_GetContourScallopOutForced(self, *args, **kwargs)

    def GetContourArea(self, *args, **kwargs):
        """GetContourArea(self, int icont) -> double"""
        return _freesteelpy.FsWeave_GetContourArea(self, *args, **kwargs)

    def GetContourDiameter(self, *args, **kwargs):
        """GetContourDiameter(self, int icont) -> double"""
        return _freesteelpy.FsWeave_GetContourDiameter(self, *args, **kwargs)

    def GetMaxDistanceToContour(self, *args, **kwargs):
        """
        GetMaxDistanceToContour(self, FsPath2X fspstart, int inodestart, FsPath2X fspend, 
            int inodeend) -> double
        """
        return _freesteelpy.FsWeave_GetMaxDistanceToContour(self, *args, **kwargs)

    def MeasureMaxDistanceBetween(self, *args, **kwargs):
        """MeasureMaxDistanceBetween(self, FsWeave fsweavei) -> double"""
        return _freesteelpy.FsWeave_MeasureMaxDistanceBetween(self, *args, **kwargs)

    def GetMaxRad(self, *args, **kwargs):
        """GetMaxRad(self, FsPath2X fsp, int inode, double rad) -> double"""
        return _freesteelpy.FsWeave_GetMaxRad(self, *args, **kwargs)

    def GetClosestPocket(self, *args, **kwargs):
        """GetClosestPocket(self, FsPath2X fsp, int inode) -> int"""
        return _freesteelpy.FsWeave_GetClosestPocket(self, *args, **kwargs)

    def CreatePocketOpening(self, *args, **kwargs):
        """
        CreatePocketOpening(self, FsWeave fsweaveI, int icont, double offsetmin, double offsetmax, 
            double minrad, double maxdirchange, 
            FsPath2X fspathI, FsSurf fssurfI) -> bool
        """
        return _freesteelpy.FsWeave_CreatePocketOpening(self, *args, **kwargs)

    def GetContactHistogramPeak(self, *args, **kwargs):
        """
        GetContactHistogramPeak(self, int icontour, double vdmin, double vdmax, double aperture, 
            double minfreq) -> double
        """
        return _freesteelpy.FsWeave_GetContactHistogramPeak(self, *args, **kwargs)

    def Clear(self):
        """Clear(self)"""
        return _freesteelpy.FsWeave_Clear(self)

    def Compact(self):
        """Compact(self)"""
        return _freesteelpy.FsWeave_Compact(self)

    def New():
        """New() -> FsWeave"""
        return _freesteelpy.FsWeave_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _freesteelpy.delete_FsWeave
    __del__ = lambda self : None;
    def IsExteriorFull(self):
        """IsExteriorFull(self) -> bool"""
        return _freesteelpy.FsWeave_IsExteriorFull(self)

    def DCheckWeaveZ(self, *args, **kwargs):
        """DCheckWeaveZ(self, double lupperweavetipz) -> double"""
        return _freesteelpy.FsWeave_DCheckWeaveZ(self, *args, **kwargs)

    def DGet(self, *args, **kwargs):
        """DGet(self, int inum, int ix0, int ix1, int ix2) -> double"""
        return _freesteelpy.FsWeave_DGet(self, *args, **kwargs)

FsWeave_swigregister = _freesteelpy.FsWeave_swigregister
FsWeave_swigregister(FsWeave)

def FsWeave_New():
  """FsWeave_New() -> FsWeave"""
  return _freesteelpy.FsWeave_New()


def DWeavePocketInside(*args, **kwargs):
  """
    DWeavePocketInside(FsWeave fsweaveO, int ipocketOuter, FsWeave fsweaveI, 
        int ipocketInner) -> bool
    """
  return _freesteelpy.DWeavePocketInside(*args, **kwargs)
class FsBoundaries(FsBoundariesInstanceCounter):
    """Proxy of C++ FsBoundaries class"""
    __swig_setmethods__ = {}
    for _s in [FsBoundariesInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsBoundaries, name, value)
    __swig_getmethods__ = {}
    for _s in [FsBoundariesInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsBoundaries, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddBoundary(self, *args, **kwargs):
        """AddBoundary(self, FsPath2X path)"""
        return _freesteelpy.FsBoundaries_AddBoundary(self, *args, **kwargs)

    def Build(self, *args, **kwargs):
        """Build(self, double boxWidth)"""
        return _freesteelpy.FsBoundaries_Build(self, *args, **kwargs)

    def New():
        """New() -> FsBoundaries"""
        return _freesteelpy.FsBoundaries_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _freesteelpy.delete_FsBoundaries
    __del__ = lambda self : None;
FsBoundaries_swigregister = _freesteelpy.FsBoundaries_swigregister
FsBoundaries_swigregister(FsBoundaries)

def FsBoundaries_New():
  """FsBoundaries_New() -> FsBoundaries"""
  return _freesteelpy.FsBoundaries_New()

class FsBoxedPath(FsBoxedPathInstanceCounter):
    """Proxy of C++ FsBoxedPath class"""
    __swig_setmethods__ = {}
    for _s in [FsBoxedPathInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsBoxedPath, name, value)
    __swig_getmethods__ = {}
    for _s in [FsBoxedPathInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsBoxedPath, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddPathToBoxedPath(self, *args, **kwargs):
        """AddPathToBoxedPath(self, FsPath2X path)"""
        return _freesteelpy.FsBoxedPath_AddPathToBoxedPath(self, *args, **kwargs)

    def SetOffsetRadius(self, *args, **kwargs):
        """SetOffsetRadius(self, double offset)"""
        return _freesteelpy.FsBoxedPath_SetOffsetRadius(self, *args, **kwargs)

    def BuildBoxedPath(self, *args, **kwargs):
        """BuildBoxedPath(self, double boxWidth)"""
        return _freesteelpy.FsBoxedPath_BuildBoxedPath(self, *args, **kwargs)

    def AddPathChainToBoxedPath(self, *args, **kwargs):
        """AddPathChainToBoxedPath(self, FsPath2X chainpath)"""
        return _freesteelpy.FsBoxedPath_AddPathChainToBoxedPath(self, *args, **kwargs)

    def New():
        """New() -> FsBoxedPath"""
        return _freesteelpy.FsBoxedPath_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _freesteelpy.delete_FsBoxedPath
    __del__ = lambda self : None;
FsBoxedPath_swigregister = _freesteelpy.FsBoxedPath_swigregister
FsBoxedPath_swigregister(FsBoxedPath)

def FsBoxedPath_New():
  """FsBoxedPath_New() -> FsBoxedPath"""
  return _freesteelpy.FsBoxedPath_New()

class FsRibbon(_object):
    """Proxy of C++ FsRibbon class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsRibbon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FsRibbon, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRibbonShape(self, *args, **kwargs):
        """
        SetRibbonShape(self, FsBoundaries fsstockboundaries, double p0u, double p0v, 
            double p1u, double p1v, double ribrad, double strandwidth)
        """
        return _freesteelpy.FsRibbon_SetRibbonShape(self, *args, **kwargs)

    def GetRibbonArea(self):
        """GetRibbonArea(self) -> double"""
        return _freesteelpy.FsRibbon_GetRibbonArea(self)

    def PushIntoSurface(self, *args, **kwargs):
        """PushIntoSurface(self, FsSurf fssurf, double z)"""
        return _freesteelpy.FsRibbon_PushIntoSurface(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsRibbon
    __del__ = lambda self : None;
FsRibbon_swigregister = _freesteelpy.FsRibbon_swigregister
FsRibbon_swigregister(FsRibbon)

class FsHorizontalInflexionAvoidance(FsHorizontalInflexionAvoidanceInstanceCounter):
    """Proxy of C++ FsHorizontalInflexionAvoidance class"""
    __swig_setmethods__ = {}
    for _s in [FsHorizontalInflexionAvoidanceInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsHorizontalInflexionAvoidance, name, value)
    __swig_getmethods__ = {}
    for _s in [FsHorizontalInflexionAvoidanceInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsHorizontalInflexionAvoidance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddSurf(self, *args, **kwargs):
        """AddSurf(self, FsSurf lfssurf)"""
        return _freesteelpy.FsHorizontalInflexionAvoidance_AddSurf(self, *args, **kwargs)

    def AddZoffset(self, *args, **kwargs):
        """AddZoffset(self, double zoffs)"""
        return _freesteelpy.FsHorizontalInflexionAvoidance_AddZoffset(self, *args, **kwargs)

    def BestAvoidInflexion(self, *args, **kwargs):
        """BestAvoidInflexion(self, double zlo, double zhi) -> double"""
        return _freesteelpy.FsHorizontalInflexionAvoidance_BestAvoidInflexion(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsHorizontalInflexionAvoidance
    __del__ = lambda self : None;
    def New():
        """New() -> FsHorizontalInflexionAvoidance"""
        return _freesteelpy.FsHorizontalInflexionAvoidance_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsHorizontalInflexionAvoidance_swigregister = _freesteelpy.FsHorizontalInflexionAvoidance_swigregister
FsHorizontalInflexionAvoidance_swigregister(FsHorizontalInflexionAvoidance)

def FsHorizontalInflexionAvoidance_New():
  """FsHorizontalInflexionAvoidance_New() -> FsHorizontalInflexionAvoidance"""
  return _freesteelpy.FsHorizontalInflexionAvoidance_New()

class FsHorizontalToolSurface(FsHorizontalToolSurfaceInstanceCounter):
    """Proxy of C++ FsHorizontalToolSurface class"""
    __swig_setmethods__ = {}
    for _s in [FsHorizontalToolSurfaceInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsHorizontalToolSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [FsHorizontalToolSurfaceInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsHorizontalToolSurface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddSurf(self, *args, **kwargs):
        """AddSurf(self, FsSurf lfssurf)"""
        return _freesteelpy.FsHorizontalToolSurface_AddSurf(self, *args, **kwargs)

    def AddTipShape(self, *args, **kwargs):
        """AddTipShape(self, double ltipcornerrad, double ltipflatrad, double ltipcenz)"""
        return _freesteelpy.FsHorizontalToolSurface_AddTipShape(self, *args, **kwargs)

    def AddCone(self, *args, **kwargs):
        """
        AddCone(self, double lconeradlo, double lconeradhi, double lconezlo, 
            double lconezhi, int liconezlo_state)
        """
        return _freesteelpy.FsHorizontalToolSurface_AddCone(self, *args, **kwargs)

    def AddCylinder(self, *args, **kwargs):
        """AddCylinder(self, double lcylrad, double lcylzlo, double lcylzhi, int licylzlo_state)"""
        return _freesteelpy.FsHorizontalToolSurface_AddCylinder(self, *args, **kwargs)

    def AddZFrustrum(self, *args, **kwargs):
        """AddZFrustrum(self, double zlo, double radlo, double zhi, double radhi)"""
        return _freesteelpy.FsHorizontalToolSurface_AddZFrustrum(self, *args, **kwargs)

    def SetIntersectionCondition(self, *args, **kwargs):
        """SetIntersectionCondition(self, bool lbIntersectSliceVolume)"""
        return _freesteelpy.FsHorizontalToolSurface_SetIntersectionCondition(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsHorizontalToolSurface
    __del__ = lambda self : None;
    def New():
        """New() -> FsHorizontalToolSurface"""
        return _freesteelpy.FsHorizontalToolSurface_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsHorizontalToolSurface_swigregister = _freesteelpy.FsHorizontalToolSurface_swigregister
FsHorizontalToolSurface_swigregister(FsHorizontalToolSurface)

def FsHorizontalToolSurface_New():
  """FsHorizontalToolSurface_New() -> FsHorizontalToolSurface"""
  return _freesteelpy.FsHorizontalToolSurface_New()

class FsImplicitArea(FsImplicitAreaInstanceCounter):
    """Proxy of C++ FsImplicitArea class"""
    __swig_setmethods__ = {}
    for _s in [FsImplicitAreaInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsImplicitArea, name, value)
    __swig_getmethods__ = {}
    for _s in [FsImplicitAreaInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsImplicitArea, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddHorizToolSurf(self, *args, **kwargs):
        """AddHorizToolSurf(self, FsHorizontalToolSurface lfshorizontaltoolsurf)"""
        return _freesteelpy.FsImplicitArea_AddHorizToolSurf(self, *args, **kwargs)

    def AddUpperWeaveForSpeed(self, *args, **kwargs):
        """AddUpperWeaveForSpeed(self, FsWeave lfsupperweave, double lupperweavetipz)"""
        return _freesteelpy.FsImplicitArea_AddUpperWeaveForSpeed(self, *args, **kwargs)

    def AddWeaveForOffset2D(self, *args, **kwargs):
        """
        AddWeaveForOffset2D(self, bool lboffsetweaveInverted, FsWeave fsoffsetweaveI, 
            double loffsetweaverad, int ipocketnumber)
        """
        return _freesteelpy.FsImplicitArea_AddWeaveForOffset2D(self, *args, **kwargs)

    def DCheckInflexionDistance(self, *args, **kwargs):
        """DCheckInflexionDistance(self, FsHorizontalInflexionAvoidance fsinflexionavoidanceI) -> double"""
        return _freesteelpy.FsImplicitArea_DCheckInflexionDistance(self, *args, **kwargs)

    def SetMachiningBoundaries(self, *args, **kwargs):
        """SetMachiningBoundaries(self, FsBoundaries boundaries, double offset)"""
        return _freesteelpy.FsImplicitArea_SetMachiningBoundaries(self, *args, **kwargs)

    def SwapInMachiningBoundary(self, *args, **kwargs):
        """SwapInMachiningBoundary(self, FsImplicitAreaSurface lfsiaI)"""
        return _freesteelpy.FsImplicitArea_SwapInMachiningBoundary(self, *args, **kwargs)

    def SetContourConditions(self, *args, **kwargs):
        """
        SetContourConditions(self, double lminCNdotContour, double lmaxZdiffContour, double ldeltaHdiffContour, 
            double lmaxHdiffContour, 
            double lmaxCPcuspContour, double lminBNdotContour)
        """
        return _freesteelpy.FsImplicitArea_SetContourConditions(self, *args, **kwargs)

    def AddToolpath(self, *args, **kwargs):
        """AddToolpath(self, FsBoxedPath tp)"""
        return _freesteelpy.FsImplicitArea_AddToolpath(self, *args, **kwargs)

    def HasContactConditionFilters(self):
        """HasContactConditionFilters(self) -> bool"""
        return _freesteelpy.FsImplicitArea_HasContactConditionFilters(self)

    def AddContactConditionFilter(self, *args, **kwargs):
        """AddContactConditionFilter(self, ContactConditionFilter filter)"""
        return _freesteelpy.FsImplicitArea_AddContactConditionFilter(self, *args, **kwargs)

    def SetZHigh(self, *args, **kwargs):
        """SetZHigh(self, double zHigh)"""
        return _freesteelpy.FsImplicitArea_SetZHigh(self, *args, **kwargs)

    def GenWeaveZProfile(self, *args, **kwargs):
        """GenWeaveZProfile(self, FsWeave fsweave, bool multipleWorkers = True, bool allowSubdivisionMT = True)"""
        return _freesteelpy.FsImplicitArea_GenWeaveZProfile(self, *args, **kwargs)

    def GenFibreF(self, *args, **kwargs):
        """GenFibreF(self, FsFibre fsfibre)"""
        return _freesteelpy.FsImplicitArea_GenFibreF(self, *args, **kwargs)

    def GetPropGenweaveDone(self, *args, **kwargs):
        """GetPropGenweaveDone(self, double propvfibs, double propufibs) -> double"""
        return _freesteelpy.FsImplicitArea_GetPropGenweaveDone(self, *args, **kwargs)

    def GetProgress(self):
        """GetProgress(self) -> double"""
        return _freesteelpy.FsImplicitArea_GetProgress(self)

    def MakeToTerminate(self):
        """MakeToTerminate(self)"""
        return _freesteelpy.FsImplicitArea_MakeToTerminate(self)

    def ReleaseWorkspaces(self):
        """ReleaseWorkspaces(self)"""
        return _freesteelpy.FsImplicitArea_ReleaseWorkspaces(self)

    __swig_destroy__ = _freesteelpy.delete_FsImplicitArea
    __del__ = lambda self : None;
    def New(*args, **kwargs):
        """New(int itype) -> FsImplicitArea"""
        return _freesteelpy.FsImplicitArea_New(*args, **kwargs)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
FsImplicitArea_swigregister = _freesteelpy.FsImplicitArea_swigregister
FsImplicitArea_swigregister(FsImplicitArea)

def FsImplicitArea_New(*args, **kwargs):
  """FsImplicitArea_New(int itype) -> FsImplicitArea"""
  return _freesteelpy.FsImplicitArea_New(*args, **kwargs)

class FsPath2X(FsPath2XInstanceCounter):
    """Proxy of C++ FsPath2X class"""
    __swig_setmethods__ = {}
    for _s in [FsPath2XInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsPath2X, name, value)
    __swig_getmethods__ = {}
    for _s in [FsPath2XInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsPath2X, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RADIUS_COMPENSATION_CENTER = _freesteelpy.FsPath2X_RADIUS_COMPENSATION_CENTER
    RADIUS_COMPENSATION_LEFT = _freesteelpy.FsPath2X_RADIUS_COMPENSATION_LEFT
    RADIUS_COMPENSATION_RIGHT = _freesteelpy.FsPath2X_RADIUS_COMPENSATION_RIGHT
    __swig_setmethods__["z"] = _freesteelpy.FsPath2X_z_set
    __swig_getmethods__["z"] = _freesteelpy.FsPath2X_z_get
    if _newclass:z = _swig_property(_freesteelpy.FsPath2X_z_get, _freesteelpy.FsPath2X_z_set)
    __swig_setmethods__["movement_type"] = _freesteelpy.FsPath2X_movement_type_set
    __swig_getmethods__["movement_type"] = _freesteelpy.FsPath2X_movement_type_get
    if _newclass:movement_type = _swig_property(_freesteelpy.FsPath2X_movement_type_get, _freesteelpy.FsPath2X_movement_type_set)
    __swig_setmethods__["bthinned"] = _freesteelpy.FsPath2X_bthinned_set
    __swig_getmethods__["bthinned"] = _freesteelpy.FsPath2X_bthinned_get
    if _newclass:bthinned = _swig_property(_freesteelpy.FsPath2X_bthinned_get, _freesteelpy.FsPath2X_bthinned_set)
    def GetMemorySize(self):
        """GetMemorySize(self) -> size_t"""
        return _freesteelpy.FsPath2X_GetMemorySize(self)

    def GetCapacity(self):
        """GetCapacity(self) -> size_t"""
        return _freesteelpy.FsPath2X_GetCapacity(self)

    def Compact(self):
        """Compact(self)"""
        return _freesteelpy.FsPath2X_Compact(self)

    def GetNMiddleStartFrees(self):
        """GetNMiddleStartFrees(self) -> int"""
        return _freesteelpy.FsPath2X_GetNMiddleStartFrees(self)

    def GetMiddleStartFreeNumber(self, *args, **kwargs):
        """GetMiddleStartFreeNumber(self, int i, bool bstart) -> int"""
        return _freesteelpy.FsPath2X_GetMiddleStartFreeNumber(self, *args, **kwargs)

    def SetPrevCutPath(self, *args, **kwargs):
        """SetPrevCutPath(self, FsPath2X lprevcutpath)"""
        return _freesteelpy.FsPath2X_SetPrevCutPath(self, *args, **kwargs)

    def SetPrevLinkPath(self, *args, **kwargs):
        """SetPrevLinkPath(self, FsPath2X lprevlinkpath)"""
        return _freesteelpy.FsPath2X_SetPrevLinkPath(self, *args, **kwargs)

    def GetPrevCutPath(self):
        """GetPrevCutPath(self) -> FsPath2X"""
        return _freesteelpy.FsPath2X_GetPrevCutPath(self)

    def GetPrevLinkPath(self):
        """GetPrevLinkPath(self) -> FsPath2X"""
        return _freesteelpy.FsPath2X_GetPrevLinkPath(self)

    def Is3D(self):
        """Is3D(self) -> bool"""
        return _freesteelpy.FsPath2X_Is3D(self)

    def Is5D(self):
        """Is5D(self) -> bool"""
        return _freesteelpy.FsPath2X_Is5D(self)

    def IsFullLoop(self):
        """IsFullLoop(self) -> bool"""
        return _freesteelpy.FsPath2X_IsFullLoop(self)

    def IsClosed(self):
        """IsClosed(self) -> bool"""
        return _freesteelpy.FsPath2X_IsClosed(self)

    def GetStartEndDistance2(self):
        """GetStartEndDistance2(self) -> double"""
        return _freesteelpy.FsPath2X_GetStartEndDistance2(self)

    def DumpInfo(self, fullDump = False):
        """DumpInfo(self, bool fullDump = False)"""
        return _freesteelpy.FsPath2X_DumpInfo(self, fullDump)

    def Close(self):
        """Close(self)"""
        return _freesteelpy.FsPath2X_Close(self)

    def Start(self, *args):
        """
        Start(self, double u, double v)
        Start(self, double x, double y, double z)
        """
        return _freesteelpy.FsPath2X_Start(self, *args)

    def AddLine(self, *args):
        """
        AddLine(self, double u, double v)
        AddLine(self, double x, double y, double z)
        """
        return _freesteelpy.FsPath2X_AddLine(self, *args)

    def AddArcNoSplit(self, *args, **kwargs):
        """AddArcNoSplit(self, double uc, double vc, double u, double v, bool bclock)"""
        return _freesteelpy.FsPath2X_AddArcNoSplit(self, *args, **kwargs)

    def AddArc(self, *args, **kwargs):
        """AddArc(self, double uc, double vc, double u, double v, bool bclock)"""
        return _freesteelpy.FsPath2X_AddArc(self, *args, **kwargs)

    def AddArcCorrectCentre(self, *args, **kwargs):
        """AddArcCorrectCentre(self, double uc, double vc, double u, double v, bool bclock)"""
        return _freesteelpy.FsPath2X_AddArcCorrectCentre(self, *args, **kwargs)

    def AddVerticalArc(self, *args, **kwargs):
        """
        AddVerticalArc(self, double xc, double yc, double zc, double x, double y, 
            double z, bool babove)
        """
        return _freesteelpy.FsPath2X_AddVerticalArc(self, *args, **kwargs)

    def AddHelix(self, *args, **kwargs):
        """
        AddHelix(self, double xc, double yc, double x, double y, double z, 
            bool bclock)
        """
        return _freesteelpy.FsPath2X_AddHelix(self, *args, **kwargs)

    def AddHelixNoSplit(self, *args, **kwargs):
        """
        AddHelixNoSplit(self, double xc, double yc, double x, double y, double z, 
            bool bclock)
        """
        return _freesteelpy.FsPath2X_AddHelixNoSplit(self, *args, **kwargs)

    def Compress(self):
        """Compress(self)"""
        return _freesteelpy.FsPath2X_Compress(self)

    def Clear(self, *args, **kwargs):
        """Clear(self, double lz)"""
        return _freesteelpy.FsPath2X_Clear(self, *args, **kwargs)

    def Reserve(self, *args, **kwargs):
        """Reserve(self, unsigned int capacity)"""
        return _freesteelpy.FsPath2X_Reserve(self, *args, **kwargs)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _freesteelpy.FsPath2X_IsEmpty(self)

    def GetNpts(self):
        """GetNpts(self) -> int"""
        return _freesteelpy.FsPath2X_GetNpts(self)

    def GetX(self, *args, **kwargs):
        """GetX(self, int i) -> double"""
        return _freesteelpy.FsPath2X_GetX(self, *args, **kwargs)

    def GetY(self, *args, **kwargs):
        """GetY(self, int i) -> double"""
        return _freesteelpy.FsPath2X_GetY(self, *args, **kwargs)

    def GetZ(self, *args):
        """
        GetZ(self) -> double
        GetZ(self, int i) -> double
        """
        return _freesteelpy.FsPath2X_GetZ(self, *args)

    def GetP2(self, *args, **kwargs):
        """GetP2(self, int i) -> P2"""
        return _freesteelpy.FsPath2X_GetP2(self, *args, **kwargs)

    def GetP(self, *args, **kwargs):
        """GetP(self, int i) -> P3"""
        return _freesteelpy.FsPath2X_GetP(self, *args, **kwargs)

    def GetTangentX(self, *args, **kwargs):
        """GetTangentX(self, int i, FsWeave fsweave) -> double"""
        return _freesteelpy.FsPath2X_GetTangentX(self, *args, **kwargs)

    def GetTangentY(self, *args, **kwargs):
        """GetTangentY(self, int i, FsWeave fsweave) -> double"""
        return _freesteelpy.FsPath2X_GetTangentY(self, *args, **kwargs)

    def GetToolAxis(self, *args, **kwargs):
        """GetToolAxis(self, int i) -> P3"""
        return _freesteelpy.FsPath2X_GetToolAxis(self, *args, **kwargs)

    def GetD(self, *args, **kwargs):
        """GetD(self, int i, int a) -> double"""
        return _freesteelpy.FsPath2X_GetD(self, *args, **kwargs)

    def ConvertTo2D(self, *args, **kwargs):
        """ConvertTo2D(self, double z)"""
        return _freesteelpy.FsPath2X_ConvertTo2D(self, *args, **kwargs)

    def ConvertTo3D(self):
        """ConvertTo3D(self)"""
        return _freesteelpy.FsPath2X_ConvertTo3D(self)

    def IsArc(self, *args, **kwargs):
        """IsArc(self, int ii) -> bool"""
        return _freesteelpy.FsPath2X_IsArc(self, *args, **kwargs)

    def IsHArc(self, *args, **kwargs):
        """IsHArc(self, int ii) -> bool"""
        return _freesteelpy.FsPath2X_IsHArc(self, *args, **kwargs)

    def IsVArc(self, *args, **kwargs):
        """IsVArc(self, int ii) -> bool"""
        return _freesteelpy.FsPath2X_IsVArc(self, *args, **kwargs)

    def GetXC(self, *args, **kwargs):
        """GetXC(self, int ii) -> double"""
        return _freesteelpy.FsPath2X_GetXC(self, *args, **kwargs)

    def GetYC(self, *args, **kwargs):
        """GetYC(self, int ii) -> double"""
        return _freesteelpy.FsPath2X_GetYC(self, *args, **kwargs)

    def GetZC(self, *args, **kwargs):
        """GetZC(self, int ii) -> double"""
        return _freesteelpy.FsPath2X_GetZC(self, *args, **kwargs)

    def IsClock(self, *args, **kwargs):
        """IsClock(self, int ii) -> bool"""
        return _freesteelpy.FsPath2X_IsClock(self, *args, **kwargs)

    def IsAbove(self, *args, **kwargs):
        """IsAbove(self, int ii) -> bool"""
        return _freesteelpy.FsPath2X_IsAbove(self, *args, **kwargs)

    def GetC(self, *args, **kwargs):
        """GetC(self, int ii) -> P3"""
        return _freesteelpy.FsPath2X_GetC(self, *args, **kwargs)

    def GetC2(self, *args, **kwargs):
        """GetC2(self, int ii) -> P2"""
        return _freesteelpy.FsPath2X_GetC2(self, *args, **kwargs)

    def GetN(self, *args, **kwargs):
        """GetN(self, int ii) -> P3"""
        return _freesteelpy.FsPath2X_GetN(self, *args, **kwargs)

    def GetEntityType(self, *args, **kwargs):
        """GetEntityType(self, int i) -> PathEntityType"""
        return _freesteelpy.FsPath2X_GetEntityType(self, *args, **kwargs)

    def GetClosestNode(self, *args, **kwargs):
        """GetClosestNode(self, double px, double py) -> int"""
        return _freesteelpy.FsPath2X_GetClosestNode(self, *args, **kwargs)

    def GetXlo(self):
        """GetXlo(self) -> double"""
        return _freesteelpy.FsPath2X_GetXlo(self)

    def GetXhi(self):
        """GetXhi(self) -> double"""
        return _freesteelpy.FsPath2X_GetXhi(self)

    def GetYlo(self):
        """GetYlo(self) -> double"""
        return _freesteelpy.FsPath2X_GetYlo(self)

    def GetYhi(self):
        """GetYhi(self) -> double"""
        return _freesteelpy.FsPath2X_GetYhi(self)

    def GetZlo(self):
        """GetZlo(self) -> double"""
        return _freesteelpy.FsPath2X_GetZlo(self)

    def GetZhi(self):
        """GetZhi(self) -> double"""
        return _freesteelpy.FsPath2X_GetZhi(self)

    def IsContourFollowing(self):
        """IsContourFollowing(self) -> bool"""
        return _freesteelpy.FsPath2X_IsContourFollowing(self)

    def HasEngageData(self):
        """HasEngageData(self) -> bool"""
        return _freesteelpy.FsPath2X_HasEngageData(self)

    def GetCutEngage(self, *args, **kwargs):
        """GetCutEngage(self, int i) -> double"""
        return _freesteelpy.FsPath2X_GetCutEngage(self, *args, **kwargs)

    def GetMaxCutEngageToClear(self, *args, **kwargs):
        """GetMaxCutEngageToClear(self, bool bOnLeft) -> double"""
        return _freesteelpy.FsPath2X_GetMaxCutEngageToClear(self, *args, **kwargs)

    def DoesEngageNoncuttingShaft(self):
        """DoesEngageNoncuttingShaft(self) -> bool"""
        return _freesteelpy.FsPath2X_DoesEngageNoncuttingShaft(self)

    def IsOnContour(self, *args, **kwargs):
        """IsOnContour(self, int i) -> bool"""
        return _freesteelpy.FsPath2X_IsOnContour(self, *args, **kwargs)

    def IsClockwise(self):
        """IsClockwise(self) -> bool"""
        return _freesteelpy.FsPath2X_IsClockwise(self)

    def GetContourNumber(self, *args, **kwargs):
        """GetContourNumber(self, FsWeave fsweave, bool bpathfront) -> int"""
        return _freesteelpy.FsPath2X_GetContourNumber(self, *args, **kwargs)

    def EqualOnContour(*args, **kwargs):
        """
        EqualOnContour(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
            bool bfsp1front) -> bool
        """
        return _freesteelpy.FsPath2X_EqualOnContour(*args, **kwargs)

    if _newclass:EqualOnContour = staticmethod(EqualOnContour)
    __swig_getmethods__["EqualOnContour"] = lambda x: EqualOnContour
    def BetweenOnContourTailOpen(*args, **kwargs):
        """
        BetweenOnContourTailOpen(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
            bool bfsp1front, FsPath2X fsp2, 
            bool bfsp2front) -> bool
        """
        return _freesteelpy.FsPath2X_BetweenOnContourTailOpen(*args, **kwargs)

    if _newclass:BetweenOnContourTailOpen = staticmethod(BetweenOnContourTailOpen)
    __swig_getmethods__["BetweenOnContourTailOpen"] = lambda x: BetweenOnContourTailOpen
    def HeadEqualsTail(self):
        """HeadEqualsTail(self) -> bool"""
        return _freesteelpy.FsPath2X_HeadEqualsTail(self)

    def ContourLength(*args, **kwargs):
        """
        ContourLength(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
            bool bfsp1front) -> double
        """
        return _freesteelpy.FsPath2X_ContourLength(*args, **kwargs)

    if _newclass:ContourLength = staticmethod(ContourLength)
    __swig_getmethods__["ContourLength"] = lambda x: ContourLength
    def ClearCutWeaveConditions(self):
        """ClearCutWeaveConditions(self)"""
        return _freesteelpy.FsPath2X_ClearCutWeaveConditions(self)

    def SetCumuleng(self, *args, **kwargs):
        """SetCumuleng(self, double lengthatstart) -> double"""
        return _freesteelpy.FsPath2X_SetCumuleng(self, *args, **kwargs)

    def GetCumuleng(self):
        """GetCumuleng(self) -> double"""
        return _freesteelpy.FsPath2X_GetCumuleng(self)

    def GetMLeng(self):
        """GetMLeng(self) -> double"""
        return _freesteelpy.FsPath2X_GetMLeng(self)

    def SetRadiusCompensation(self, *args, **kwargs):
        """SetRadiusCompensation(self, RadiusCompensation _radiusCompensation)"""
        return _freesteelpy.FsPath2X_SetRadiusCompensation(self, *args, **kwargs)

    def GetRadiusCompensation(self):
        """GetRadiusCompensation(self) -> RadiusCompensation"""
        return _freesteelpy.FsPath2X_GetRadiusCompensation(self)

    def SetMaxCutEngage(self, *args, **kwargs):
        """SetMaxCutEngage(self, double mce)"""
        return _freesteelpy.FsPath2X_SetMaxCutEngage(self, *args, **kwargs)

    def IsMachined(self):
        """IsMachined(self) -> bool"""
        return _freesteelpy.FsPath2X_IsMachined(self)

    def SetMachined(self, *args, **kwargs):
        """SetMachined(self, bool machined)"""
        return _freesteelpy.FsPath2X_SetMachined(self, *args, **kwargs)

    def IsThinned(self):
        """IsThinned(self) -> bool"""
        return _freesteelpy.FsPath2X_IsThinned(self)

    def SetThinned(self, *args, **kwargs):
        """SetThinned(self, bool thinned)"""
        return _freesteelpy.FsPath2X_SetThinned(self, *args, **kwargs)

    def GetMovement(self):
        """GetMovement(self) -> Movement"""
        return _freesteelpy.FsPath2X_GetMovement(self)

    def SetMovement(self, *args, **kwargs):
        """SetMovement(self, Movement movement)"""
        return _freesteelpy.FsPath2X_SetMovement(self, *args, **kwargs)

    def GetGenerator(self):
        """GetGenerator(self) -> unsigned int"""
        return _freesteelpy.FsPath2X_GetGenerator(self)

    def SetGenerator(self, *args, **kwargs):
        """SetGenerator(self, unsigned int _generator)"""
        return _freesteelpy.FsPath2X_SetGenerator(self, *args, **kwargs)

    FLAG_CONTOUR_FILTERED = _freesteelpy.FsPath2X_FLAG_CONTOUR_FILTERED
    FLAG_CONTOUR_NOT_FILTERED = _freesteelpy.FsPath2X_FLAG_CONTOUR_NOT_FILTERED
    FLAG_CONTOUR_MACHINING_BOUNDARY = _freesteelpy.FsPath2X_FLAG_CONTOUR_MACHINING_BOUNDARY
    FLAG_CONTOUR_NO_MACHINING_BOUNDARY = _freesteelpy.FsPath2X_FLAG_CONTOUR_NO_MACHINING_BOUNDARY
    def RecordContour(self, *args, **kwargs):
        """RecordContour(self, FsWeave fsweave, bool b3D, int inum, double thinto) -> unsigned int"""
        return _freesteelpy.FsPath2X_RecordContour(self, *args, **kwargs)

    def RecordContourFragments(self, *args, **kwargs):
        """RecordContourFragments(self, FsWeave fsweave, int ipp, double thintol)"""
        return _freesteelpy.FsPath2X_RecordContourFragments(self, *args, **kwargs)

    def RecordInnerPoints(self, *args, **kwargs):
        """
        RecordInnerPoints(self, FsWeave fsweave, int inum, bool bUseBisector, bool bextremes, 
            double minrad, double maxdirchange, 
            FsPath2X fspathI = None)
        """
        return _freesteelpy.FsPath2X_RecordInnerPoints(self, *args, **kwargs)

    def RecordSection(self, *args, **kwargs):
        """
        RecordSection(self, FsPath2X fspath, int ib0, double x0, double y0, double z0, 
            int ib1, double x1, double y1, double z1)
        """
        return _freesteelpy.FsPath2X_RecordSection(self, *args, **kwargs)

    def RecordClosestOnPocketBounds(self, *args, **kwargs):
        """RecordClosestOnPocketBounds(self, FsWeave fsweave, int ipocket, double xpocket, double ypocket)"""
        return _freesteelpy.FsPath2X_RecordClosestOnPocketBounds(self, *args, **kwargs)

    def GetArea(self):
        """GetArea(self) -> double"""
        return _freesteelpy.FsPath2X_GetArea(self)

    def IsPolygon(self):
        """IsPolygon(self) -> bool"""
        return _freesteelpy.FsPath2X_IsPolygon(self)

    def Thin(self, *args, **kwargs):
        """Thin(self, double thintol, FsPath2X fsp)"""
        return _freesteelpy.FsPath2X_Thin(self, *args, **kwargs)

    def Reverse(self):
        """Reverse(self)"""
        return _freesteelpy.FsPath2X_Reverse(self)

    def CopyPath(self, *args, **kwargs):
        """CopyPath(self, FsPath2X fspi, bool bcopyiterators)"""
        return _freesteelpy.FsPath2X_CopyPath(self, *args, **kwargs)

    def CopyPathSection(self, *args, **kwargs):
        """CopyPathSection(self, FsPath2X fspi, bool bcopyiterators, int npoints)"""
        return _freesteelpy.FsPath2X_CopyPathSection(self, *args, **kwargs)

    def CopyMetaState(self, *args, **kwargs):
        """CopyMetaState(self, FsPath2X path)"""
        return _freesteelpy.FsPath2X_CopyMetaState(self, *args, **kwargs)

    def GenTrackPthItersOnFree(self, *args, **kwargs):
        """
        GenTrackPthItersOnFree(self, FsPath2X fstracki, FsPath2X fsfrom, int ifromnode, 
            FsPath2X fsto, int itonode, int injoin, bool bkeepfrontpath, 
            FsWeave fsweave) -> bool
        """
        return _freesteelpy.FsPath2X_GenTrackPthItersOnFree(self, *args, **kwargs)

    def GenTrackPthIters(self, *args, **kwargs):
        """GenTrackPthIters(self, FsPath2X fstracki, FsWeave fsweavei)"""
        return _freesteelpy.FsPath2X_GenTrackPthIters(self, *args, **kwargs)

    def GetNTrimmedPaths(self, *args, **kwargs):
        """GetNTrimmedPaths(self, bool bOutside) -> int"""
        return _freesteelpy.FsPath2X_GetNTrimmedPaths(self, *args, **kwargs)

    def RecordTrimmedPath(self, *args, **kwargs):
        """RecordTrimmedPath(self, FsPath2X path, int itrimmed, bool bOutside)"""
        return _freesteelpy.FsPath2X_RecordTrimmedPath(self, *args, **kwargs)

    __swig_destroy__ = _freesteelpy.delete_FsPath2X
    __del__ = lambda self : None;
    def New(*args, **kwargs):
        """New(double lz) -> FsPath2X"""
        return _freesteelpy.FsPath2X_New(*args, **kwargs)

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def CreateSame(*args, **kwargs):
        """CreateSame(FsPath2X source) -> FsPath2X"""
        return _freesteelpy.FsPath2X_CreateSame(*args, **kwargs)

    if _newclass:CreateSame = staticmethod(CreateSame)
    __swig_getmethods__["CreateSame"] = lambda x: CreateSame
FsPath2X_swigregister = _freesteelpy.FsPath2X_swigregister
FsPath2X_swigregister(FsPath2X)

def FsPath2X_EqualOnContour(*args, **kwargs):
  """
    FsPath2X_EqualOnContour(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
        bool bfsp1front) -> bool
    """
  return _freesteelpy.FsPath2X_EqualOnContour(*args, **kwargs)

def FsPath2X_BetweenOnContourTailOpen(*args, **kwargs):
  """
    FsPath2X_BetweenOnContourTailOpen(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
        bool bfsp1front, FsPath2X fsp2, 
        bool bfsp2front) -> bool
    """
  return _freesteelpy.FsPath2X_BetweenOnContourTailOpen(*args, **kwargs)

def FsPath2X_ContourLength(*args, **kwargs):
  """
    FsPath2X_ContourLength(FsWeave fsweave, FsPath2X fsp0, bool bfsp0front, FsPath2X fsp1, 
        bool bfsp1front) -> double
    """
  return _freesteelpy.FsPath2X_ContourLength(*args, **kwargs)

def FsPath2X_New(*args, **kwargs):
  """FsPath2X_New(double lz) -> FsPath2X"""
  return _freesteelpy.FsPath2X_New(*args, **kwargs)

def FsPath2X_CreateSame(*args, **kwargs):
  """FsPath2X_CreateSame(FsPath2X source) -> FsPath2X"""
  return _freesteelpy.FsPath2X_CreateSame(*args, **kwargs)

class Thinner(ThinnerInstanceCounter):
    """Proxy of C++ Thinner class"""
    __swig_setmethods__ = {}
    for _s in [ThinnerInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thinner, name, value)
    __swig_getmethods__ = {}
    for _s in [ThinnerInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thinner, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, double devtol) -> Thinner"""
        this = _freesteelpy.new_Thinner(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _freesteelpy.delete_Thinner
    __del__ = lambda self : None;
    def Thin(self, *args, **kwargs):
        """Thin(self, FsPath2X pthi) -> FsPath2X"""
        return _freesteelpy.Thinner_Thin(self, *args, **kwargs)

    def AddPath(self, *args, **kwargs):
        """AddPath(self, FsPath2X pthi, FsPath2X fspi) -> bool"""
        return _freesteelpy.Thinner_AddPath(self, *args, **kwargs)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _freesteelpy.Thinner_IsEmpty(self)

    def End(self, *args, **kwargs):
        """End(self, FsPath2X fsp)"""
        return _freesteelpy.Thinner_End(self, *args, **kwargs)

Thinner_swigregister = _freesteelpy.Thinner_swigregister
Thinner_swigregister(Thinner)

class BumpySurfTransform(_object):
    """Proxy of C++ BumpySurfTransform class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BumpySurfTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BumpySurfTransform, name)
    __repr__ = _swig_repr
    def AddPockms(self, *args, **kwargs):
        """AddPockms(self, double x, double y, double z)"""
        return _freesteelpy.BumpySurfTransform_AddPockms(self, *args, **kwargs)

    def PushTriangle(self, *args, **kwargs):
        """
        PushTriangle(self, double x0, double y0, double z0, double x1, double y1, 
            double z1, double x2, double y2, double z2) -> int
        """
        return _freesteelpy.BumpySurfTransform_PushTriangle(self, *args, **kwargs)

    def GetTriangCoord(self, *args, **kwargs):
        """GetTriangCoord(self, int ntri, int ncorn, int ncoord) -> double"""
        return _freesteelpy.BumpySurfTransform_GetTriangCoord(self, *args, **kwargs)

    def __init__(self, *args, **kwargs): 
        """__init__(self, double lpockmsrad, double llengsizediff, double ldelta) -> BumpySurfTransform"""
        this = _freesteelpy.new_BumpySurfTransform(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _freesteelpy.delete_BumpySurfTransform
    __del__ = lambda self : None;
BumpySurfTransform_swigregister = _freesteelpy.BumpySurfTransform_swigregister
BumpySurfTransform_swigregister(BumpySurfTransform)

class FsFreeFibre(FsFreeFibreInstanceCounter):
    """Proxy of C++ FsFreeFibre class"""
    __swig_setmethods__ = {}
    for _s in [FsFreeFibreInstanceCounter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FsFreeFibre, name, value)
    __swig_getmethods__ = {}
    for _s in [FsFreeFibreInstanceCounter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FsFreeFibre, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _freesteelpy.delete_FsFreeFibre
    __del__ = lambda self : None;
    def New():
        """New() -> FsFreeFibre"""
        return _freesteelpy.FsFreeFibre_New()

    if _newclass:New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    def AddSurf(self, *args, **kwargs):
        """AddSurf(self, FsSurf pfssurfi, double lrad, bool lbtsolidmodel)"""
        return _freesteelpy.FsFreeFibre_AddSurf(self, *args, **kwargs)

    def AddPockSphere(self, *args, **kwargs):
        """AddPockSphere(self, double cx, double cy, double cz, double rad)"""
        return _freesteelpy.FsFreeFibre_AddPockSphere(self, *args, **kwargs)

    def GetNBoundaries(self):
        """GetNBoundaries(self) -> int"""
        return _freesteelpy.FsFreeFibre_GetNBoundaries(self)

    def GetBoundary(self, *args, **kwargs):
        """GetBoundary(self, int ib) -> double"""
        return _freesteelpy.FsFreeFibre_GetBoundary(self, *args, **kwargs)

    def PointInsideSurface(self, *args, **kwargs):
        """PointInsideSurface(self, double x, double y, double z) -> bool"""
        return _freesteelpy.FsFreeFibre_PointInsideSurface(self, *args, **kwargs)

    def WFibreCutNew(self, *args, **kwargs):
        """
        WFibreCutNew(self, double x0, double y0, double z0, double x1, double y1, 
            double z1) -> int
        """
        return _freesteelpy.FsFreeFibre_WFibreCutNew(self, *args, **kwargs)

    def WFibreCutNewV(self, *args, **kwargs):
        """
        WFibreCutNewV(self, double x0, double y0, double z0, double vx, double vy, 
            double vz, double l) -> int
        """
        return _freesteelpy.FsFreeFibre_WFibreCutNewV(self, *args, **kwargs)

    def WFibreCutZ(self, *args, **kwargs):
        """WFibreCutZ(self, double x, double y) -> int"""
        return _freesteelpy.FsFreeFibre_WFibreCutZ(self, *args, **kwargs)

    def CutPattern(self):
        """CutPattern(self) -> int"""
        return _freesteelpy.FsFreeFibre_CutPattern(self)

    def GetPi(self, *args, **kwargs):
        """GetPi(self, int i, int ic) -> double"""
        return _freesteelpy.FsFreeFibre_GetPi(self, *args, **kwargs)

    def GetOi(self, *args, **kwargs):
        """GetOi(self, int i, int ic, double rad) -> double"""
        return _freesteelpy.FsFreeFibre_GetOi(self, *args, **kwargs)

FsFreeFibre_swigregister = _freesteelpy.FsFreeFibre_swigregister
FsFreeFibre_swigregister(FsFreeFibre)

def FsFreeFibre_New():
  """FsFreeFibre_New() -> FsFreeFibre"""
  return _freesteelpy.FsFreeFibre_New()

class WeaveBisectorGenerator(_object):
    """Proxy of C++ WeaveBisectorGenerator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeaveBisectorGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeaveBisectorGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WeaveBisectorGenerator
        __init__(self, FsWeave fsweaveI) -> WeaveBisectorGenerator
        """
        this = _freesteelpy.new_WeaveBisectorGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateBisectors(self, *args, **kwargs):
        """generateBisectors(self, int icont, double minrad, double maxdirchange)"""
        return _freesteelpy.WeaveBisectorGenerator_generateBisectors(self, *args, **kwargs)

    def popPath(self):
        """popPath(self) -> FsPath2X"""
        return _freesteelpy.WeaveBisectorGenerator_popPath(self)

    __swig_destroy__ = _freesteelpy.delete_WeaveBisectorGenerator
    __del__ = lambda self : None;
WeaveBisectorGenerator_swigregister = _freesteelpy.WeaveBisectorGenerator_swigregister
WeaveBisectorGenerator_swigregister(WeaveBisectorGenerator)

# This file is compatible with both classic and new-style classes.


